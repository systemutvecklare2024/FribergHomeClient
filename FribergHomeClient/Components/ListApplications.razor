@using FribergHomeClient.Data
@using FribergHomeClient.Data.ViewModel
@using static FribergHomeClient.Data.StatusTypes
@inject IRealEstateAgencyService AgencyService
@inject NotificationService NotificationService
@inject IRealEstateAgentService AgentService
@inject TooltipService TooltipService

@* //Author:Emelie *@
@* Puts: Christoffer *@

@if (!dataLoaded)
{
    <Spinner />
}
else
{
    <RadzenDataGrid @ref="applicationList"
                    AllowFiltering="true"
                    FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    AllowPaging="true"
                    PageSize="5"
                    AllowSorting="true"
                    AllowColumnResize="true"
                    Data="@applicationViewModels"
                    TItem="ApplicationViewModel"
                    ColumnWidth="300px">
        <Columns>
            <RadzenDataGridColumn Width="50px" Property="@nameof(ApplicationViewModel.FirstName)" Title="Förnamn" />
            <RadzenDataGridColumn Width="50px" Property="@nameof(ApplicationViewModel.LastName)" Title="Efternamn" />
            <RadzenDataGridColumn Width="50px" Title="Skapad">
                <Template Context="applicationViewModel">
                    @applicationViewModel.CreatedAt.ToString("yyyy-MM-dd HH:mm", new System.Globalization.CultureInfo("sv-SE"))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="50px" Title="Status">
                <Template Context="applicationViewModel">
                    @StatusTypes.GetLocalized(applicationViewModel.StatusType)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="30px" Title="Åtgärd">
                <Template Context="applicationViewModel">
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Small" Shade="Shade.Lighter" Icon="check" Click=@(async () => await ApproveApplication(applicationViewModel)) MouseEnter="@(args => ShowTooltip(args, "Acceptera", "var(--rz-success-lighter);"))" Text="" />
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Small" Shade="Shade.Lighter" Icon="close" Click=@(async () => await DenyApplication(applicationViewModel)) MouseEnter="@(args => ShowTooltip(args, "Neka", "var(--rz-danger-lighter);"))" Text="" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {

    [Parameter]
    public List<ApplicationDTO> Applications { get; set; } = [];
    public List<ApplicationViewModel> applicationViewModels = [];
    public List<RealEstateAgentDTO> agents = [];
    private RadzenDataGrid<ApplicationViewModel>? applicationList;
    private string errorMessage = string.Empty;
    private bool dataLoaded = false;


    protected override async Task OnInitializedAsync()
    {
        var response = await AgentService.GetAll();
        if (!response.Success || response.Data == null)
        {
            errorMessage = "Något gick fel när mäklare skulle hämtas, försök igen.";
            NotifyError(errorMessage);
            return;
        }
        agents = response.Data;

        applicationViewModels = await AgencyService.GenerateApplicationViewModels(Applications, agents);
        if (applicationViewModels.Count == 0)
        {
            errorMessage = "Något gick fel när mäklare skulle hämtas, försök igen.";
            NotifyError(errorMessage);
        }
        dataLoaded = true;
        StateHasChanged();
    }

    private async Task ApproveApplication(ApplicationViewModel applicationVM)
    {
        applicationVM.StatusType = StatusType.Approved;
        var result = await AgencyService.HandleApplication(applicationVM);
        if (!result.Success)
        {
            errorMessage = result.Message;
            NotifyError(errorMessage);
            return;
        }
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Godkänd",
                Detail = "Du har nu godkänt ansökan",
                Duration = 5000
            });

        applicationViewModels.Remove(applicationVM);
        await applicationList.Reload();
        StateHasChanged();
    }

    private async Task DenyApplication(ApplicationViewModel applicationVM)
    {
        applicationVM.StatusType = StatusType.Denied;
        var result = await AgencyService.HandleApplication(applicationVM);
        if (!result.Success)
        {
            errorMessage = result.Message;
            NotifyError(errorMessage);
            return;
        }
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Nekad",
                Detail = "Du har nu nekat ansökan",
                Duration = 5000
            });
        applicationViewModels.Remove(applicationVM);
        await applicationList.Reload();
        StateHasChanged();

    }

    private void NotifyError(string errorMessage)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Fel uppstod",
                Detail = errorMessage
            });
    }

    void ShowTooltip(ElementReference elementReference, string text, string backgroundColor)
    {
        var options = new TooltipOptions()
            {
                Position = TooltipPosition.Top,
                Style = $"background-color: {backgroundColor}; color: var(--rz-text-color); border: 1px solid var(--rz-border-color);"
            };
        TooltipService.Open(elementReference, text, options);
    }

}
