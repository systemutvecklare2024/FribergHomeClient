@using FribergHomeClient.Data
@using FribergHomeClient.Data.ViewModel
@using static FribergHomeClient.Data.StatusTypes
@inject IRealEstateAgencyService AgencyService

@* //Author:Emelie *@

@if (ApplicationViewModels == null)
{
    <p>Laddar ansökningar...</p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5" AllowSorting="true"
                    Data="@ApplicationViewModels" TItem="ApplicationViewModel" ColumnWidth="100px">
        <Columns>
            <RadzenDataGridColumn Width="50px" Property="@nameof(ApplicationViewModel.FirstName)" Title="Förnamn" />
            <RadzenDataGridColumn Width="50px" Property="@nameof(ApplicationViewModel.LastName)" Title="Efternamn" />
            <RadzenDataGridColumn Width="50px" Property="@nameof(ApplicationViewModel.CreatedAt)" Title="Skapad" />
            <RadzenDataGridColumn Width="50px" Title="Status">
                <Template Context="applicationViewModel">
                    @StatusTypes.GetLocalized(applicationViewModel.StatusType)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="50px">
                <Template Context="applicationViewModel">
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="rz-m-1" Click=@(() => {ApproveApplication(applicationViewModel);}) Text="Godkänn" />
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="rz-m-1" Click=@(() => {DenyApplication(applicationViewModel);}) Text="Neka" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    @* <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@ApplicationsVM" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedApplication>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(ApplicationViewModel.FirstName)" Filterable="false" Title="Förnamn" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(ApplicationViewModel.LastName)" Title="Efternamn" Frozen="true" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(ApplicationViewModel.LastName)" Title="Last Name" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(ApplicationViewModel.CreatedAt)" Title="Ansökningsdatum" Width="200px" />
            <RadzenDataGridColumn Property="@nameof(ApplicationViewModel.StatusType)" Title="Status" Width="120px" />
        </Columns>
    </RadzenDataGrid> *@
}

@code {

    [Parameter]
    public List<ApplicationDTO> Applications { get; set; } = [];

    public List<ApplicationViewModel> ApplicationViewModels { get; set; } = [];

    //Remove this after testing
    protected override async Task OnInitializedAsync()
    {
        var pendingApplications = Applications.Where(a => a.StatusType == StatusType.Pending);
        var agency = await AgencyService.GetById(1); //Applications[0].AgencyId ok to use or get i elsewhere?

        ApplicationViewModels = await AgencyService.GenerateApplicationViewModels(agency);


    }

    private async void ApproveApplication(ApplicationViewModel applicationVM)
    {
        applicationVM.StatusType = StatusType.Approved;
        await AgencyService.HandleApplication(applicationVM); //Recieve Response here later

        Console.WriteLine($"godkänn {applicationVM.StatusType.ToString()}");
        //ApplicationViewModels.Remove(applicationVM);
    }

    private void DenyApplication(ApplicationViewModel applicationVM)
    {
        applicationVM.StatusType = StatusType.Denied;
        Console.WriteLine($"neka {applicationVM.StatusType.ToString()}");
    }

}
