@inject DialogService DialogService

@* Author: Christoffer *@
@* Based on work by Glate(tm) *@
<RadzenRow AlignItems="AlignItems.Center">
    <RadzenColumn Size="12" SizeMD="3">
        <RadzenLabel Text="Profilbild" Component="ImageUrl" />
    </RadzenColumn>
    <RadzenColumn SizeSM="12" SizeMD="9" Style="justify-content: center;">

        <RadzenCard Style="text-align: center; padding: 10px; display: flex; align-items: center; justify-content: center;">
            <img src="@ImageUrl" alt="Image" style="max-width: 50%; height: auto; max-height: 150px; object-fit: cover;" />
            <RadzenColumn Style="display: flex; flex-direction: column; align-items: center; margin-left: 1rem;">
                <RadzenButton Icon="add" Text="Lägg till" Click="@OpenImageDialog" class="rz-my-2" />
                <RadzenButton Icon="delete" Text="Ta bort" ButtonStyle="ButtonStyle.Danger" Click="@RemoveImage" class="rz-my-2" />
            </RadzenColumn>
        </RadzenCard>

    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter] public string ImageUrl { get; set; }
    [Parameter] public EventCallback<string> ImageUrlChanged { get; set; }

    private string defaultImage = "https://upload.wikimedia.org/wikipedia/commons/7/7c/Profile_avatar_placeholder_large.png?20150327203541";


    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(ImageUrl))
        {
            ImageUrl = defaultImage;
            await ImageUrlChanged.InvokeAsync(ImageUrl);
        }
    }

    private async Task OpenImageDialog()
    {
        var parameters = new Dictionary<string, object>{
            { "ExistingImageUrl", ImageUrl }
        };

        var result = await DialogService.OpenAsync<UploadImageDialog>(
            "Lägg till profilbild",
            parameters,
            new DialogOptions() { Width = "25rem", Height = "30rem" });

        if (result != null)
        {
            ImageUrl = result.ToString();
            await ImageUrlChanged.InvokeAsync(ImageUrl);
        }
    }

    private async Task RemoveImage()
    {
        ImageUrl = defaultImage;
        await ImageUrlChanged.InvokeAsync(ImageUrl);
    }
}