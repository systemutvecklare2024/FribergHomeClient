@using FribergHomeClient.Components
@using FribergHomeClient.Data.Dto
@inject IRealEstateAgentService AgentService
@inject NotificationService NotificationService

@* Author: Tobias
CoAuthor: Emelie *@
<style>
	.custom-mail {
		text-decoration: none !important;
		color: white;
	}

	.custom-mail:hover {
		color: #598087;
	}
</style>

@if (agent == null)
{
	<Spinner />
}
else
{
	<RadzenRow Gap="1rem" class="rz-justify-content-center">
		<RadzenCard Style="width: 100%;">
			<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4">
				<RadzenImage Path="@agent?.ImageUrl" Style="width: 100px; height: 100px; border-radius: 50%;" />
				<RadzenStack Gap="0">
					<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Namn</RadzenText>
					<RadzenText TextStyle="TextStyle.Body1"><b>@(agent?.FirstName + " " + agent?.LastName)</b></RadzenText>
					<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Mäklarbyrå</RadzenText>
					<RadzenText TextStyle="TextStyle.Body1"><b>@agent?.Agency?.Name</b></RadzenText>
				</RadzenStack>
			</RadzenStack>
			<RadzenCard class="rz-background-color-primary-light rz-shadow-0 rz-border-radius-0 rz-px-8" style="margin: 1rem calc(-1 * var(--rz-card-padding));">
				@* <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Kontaktuppgifter</strong></RadzenText> *@
				<RadzenRow RowGap="0">
					<RadzenColumn SizeSM="4">
						<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mb-0">Email</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>
							<a class="custom-mail" href="mailto:@(agent?.Email)">@(agent?.Email)</a>
							</b></RadzenText>
						<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Telefonnummer</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(agent?.PhoneNumber)</b></RadzenText>
					</RadzenColumn>
				</RadzenRow>
			</RadzenCard>
		</RadzenCard>
	</RadzenRow>
}


@code {
	[Parameter]
	public int? Id { get; set; }
	RealEstateAgentDTO? agent { get; set; }
	private string errorMessage = string.Empty;
	private int? previousId;


	protected override async Task OnParametersSetAsync()
	{
		if (Id != previousId)
		{
			previousId = Id;

			if (!Id.HasValue)
			{
				errorMessage = "Misslyckades att hämta mäklare, försök igen";
				NotifyError(errorMessage);
				return;
			}
			var response = await AgentService.GetById(Id.Value);
			if (!response.Success || response.Data == null)
			{
				errorMessage = "Misslyckades att hämta mäklare, försök igen";
				NotifyError(errorMessage);
				return;
			}
			agent = response.Data;
		}
	}

	private void NotifyError(string errorMessage)
	{
		NotificationService.Notify(new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Duration = 5000,
				Summary = "Fel uppstod",
				Detail = errorMessage
			});
	}

}