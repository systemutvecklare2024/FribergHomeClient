@page "/register"
@using FribergHomeClient.Data.Dto
@using FribergHomeClient.Services
@using FribergHomeClient.Validation
@inject NavigationManager NavManager
@inject IAccountService accountService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IRealEstateAgencyService AgencyService

@* Author: Emelie *@
@* Puts: Christoffer *@

<PageTitle>Registrera konto</PageTitle>

@if (model == null)
{
    <Spinner />
}
else
{
    <Panel Title="Registrera">
        <RadzenTemplateForm Data="@model" Submit="@((AccountDTO args) => { Submit(args); })">
            @if (!success && !string.IsNullOrEmpty(errorMessage))
            {
                <div class=" alert alert-danger">
                    <p>@errorMessage</p>
                </div>
            }
            <RadzenStack>
                <RadzenFieldset Text="Användarinformation">
                    <RadzenStack Gap="1rem">
                        @* FirstName *@
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="3">
                                <RadzenLabel Text="Förnamn" Component="FirstName" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="9">
                                <RadzenTextBox Style="width: 100%;" Name="FirstName" @bind-Value=model.FirstName />
                                <RadzenRequiredValidator Component="FirstName" Text="Förnamn krävs" />
                            </RadzenColumn>
                        </RadzenRow>
                        @* LastName *@
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="3">
                                <RadzenLabel Text="Efternamn" Component="LastName" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="9">
                                <RadzenTextBox Style="width: 100%;" Name="LastName" @bind-Value=model.LastName />
                                <RadzenRequiredValidator Component="LastName" Text="Efternamn krävs" />
                            </RadzenColumn>
                        </RadzenRow>
                        @* Email *@
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="3">
                                <RadzenLabel Text="E-post" Component="Email" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="9">
                                <RadzenTextBox type="email" Style="width: 100%;" Name="Email" @bind-Value=model.Email />
                                <RadzenEmailValidator Component="Email" Text="Ogiltig E-post" />
                                <RadzenRequiredValidator Component="Email" Text="E-post krävs" />
                            </RadzenColumn>
                        </RadzenRow>
                        @* PhoneNumber *@
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="3">
                                <RadzenLabel Text="Telefonnummer" Component="PhoneNumber" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="9">
                                <RadzenTextBox Style="width: 100%;" Name="PhoneNumber" @bind-Value=model.PhoneNumber />
                                <RadzenRequiredValidator Component="PhoneNumber" Text="Telefonnummer krävs" />
                            </RadzenColumn>
                        </RadzenRow>

                        @* Author: Glate *@
                        @* ProfileImage *@
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="3">
                                <RadzenLabel Text="Profilbild" Component="ImageUrl" />
                            </RadzenColumn>
                            <RadzenColumn SizeSM="12" SizeMD="9" Style="justify-content: center;">

                                <RadzenCard Style="text-align: center; padding: 10px; display: flex; align-items: center; justify-content: center;">
                                    <img src="@model.ImageUrl" alt="Image" style="max-width: 50%; height: auto; max-height: 150px; object-fit: cover;" />
                                    <RadzenColumn Style="display: flex; flex-direction: column; align-items: center; margin-left: 1rem;">
                                        <RadzenButton Icon="add" Text="Lägg till" Click="@(() => OpenImageDialog())" class="rz-my-2" />
                                        <RadzenButton Icon="delete" Text="Ta bort" ButtonStyle="ButtonStyle.Danger" Click="@(() => RemoveImage())" class="rz-my-2" />
                                    </RadzenColumn>
                                </RadzenCard>
                            </RadzenColumn>
                        </RadzenRow>
                        @* Password *@
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="3">
                                <RadzenLabel Text="Lösenord" Component="Password" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="9">
                                <RadzenPassword Style="width: 100%;" Name="Password" @bind-Value=model.Password />
                                <RadzenRequiredValidator Component="Password" Text="Lösenord krävs" />
                            </RadzenColumn>
                        </RadzenRow>
                        @* PasswordConfirmed *@
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="3">
                                <RadzenLabel Text="Upprepa Lösenord" Component="ConfirmPassword" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="9">
                                <RadzenPassword Style="width: 100%;" Name="ConfirmPassword" @bind-Value=model.ConfirmPassword />
                                <RadzenRequiredValidator Component="ConfirmPassword" Text="Upprepa lösenord" />
                            </RadzenColumn>
                        </RadzenRow>
                        @* Agency *@
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="3">
                                <RadzenLabel Text="Mäklarbyrå" Component="AgencyId" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="9">
                                <RadzenDropDown Data="@realEstateAgencies" TextProperty="Name" ValueProperty="Id" Placeholder="Välj mäklarbyrå" Style="width: 100%;" Name="AgencyId" @bind-Value=model.AgencyId />
                                <RadzenRequiredValidator Component="AgencyId" Text="Du måste välja mäklarbyrå" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                    <RadzenRow class="rz-mt-4">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenButton ButtonType="ButtonType.Submit" Style="width: 100%;" Size="ButtonSize.Large" Icon="save" Text="Registrera" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Style="width: 100%;" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Avbryt" Click="@Cancel" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenFieldset>
            </RadzenStack>

        </RadzenTemplateForm>
    </Panel>
}

@code {

    private AccountDTO model = new();
    private List<RealEstateAgencyDTO> realEstateAgencies = [];
    private string errorMessage = string.Empty;
    private List<ValidationProblemDetails> ProblemDetails = new();
    private bool success;
    private string defaultImage = "https://upload.wikimedia.org/wikipedia/commons/7/7c/Profile_avatar_placeholder_large.png?20150327203541";

    protected override async Task OnInitializedAsync()
    {
        var response = await AgencyService.GetAll();
        if (!response.Success)
        {
            errorMessage = response.Message;
            NotifyError(errorMessage);
            return;
        }
        realEstateAgencies = response.Data;
    }

    async void Submit(AccountDTO arg)
    {
        var response = await accountService.RegisterAccount(model);
        success = response.Success;

        Console.WriteLine(success);

        if (success)
        {
            NavManager.NavigateTo("/login");
        }
        else
        {
            ProblemDetails = response.ProblemDetails;
            errorMessage = response.Message;

            foreach (var s in ProblemDetails)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = s.Key,
                        Detail = s.Value
                    });
            }
            StateHasChanged();
        }
    }

    void Cancel()
    {
        NavManager.NavigateTo("/");
    }

    private void RemoveImage()
    {
        model.ImageUrl = defaultImage;
    }

    protected override void OnInitialized()
    {
        model.ImageUrl = defaultImage;
    }

    private async Task OpenImageDialog()
    {
        var parameters = new Dictionary<string, object>{
            { "ExistingImageUrl", model.ImageUrl }
        };

        var result = await DialogService.OpenAsync<UploadImageDialog>(
            "Lägg till profilbild",
            parameters,
            new DialogOptions() { Width = "25rem", Height = "30rem" });

        if (result != null)
        {
            model.ImageUrl = result.ToString();
        }
    }

    private void NotifyError(string errorMessage)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Fel uppstod",
                Detail = errorMessage
            });
    }
}

