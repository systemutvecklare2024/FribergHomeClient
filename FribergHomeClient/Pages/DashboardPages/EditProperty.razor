@page "/dashboard/editproperty/{Id:int?}"
@using FribergHomeClient.Components
@using Microsoft.AspNetCore.Authorization
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IPropertyService PropertyService

@* Author: Christoffer *@

@attribute [Authorize(Roles = "Agent, SuperAgent")]

<PageTitle>Ändra Bostad</PageTitle>

@if (property != null)
{
    <AdminPanel Title="Ändra bostad">
        <PropertyForm Property="@property" OnSubmit="@EditPropertyCallback" SubmitButtonText="Uppdatera"></PropertyForm>
    </AdminPanel>
}
else
{
    <Spinner />
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private PropertyDTO? property;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!Id.HasValue)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Ej angiven bostad", duration: 5000);
            NavigationManager.NavigateTo("/dashboard/myobjects");
            return;
        }

        // Load Property
        var response = await PropertyService.GetAsync(Id.Value);
        if (!response.Success)
        {
            NotificationService.Notify(NotificationSeverity.Error, response.Message, duration: 5000);
            return;
        }

        property = response.Data;
    }

    async Task EditPropertyCallback(PropertyDTO dto)
    {
        if (!Id.HasValue)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Ej angiven bostad", duration: 5000);
            NavigationManager.NavigateTo("/dashboard/myobjects");
        }

        var response = await PropertyService.UpdateAsync(dto);

        if (!response.Success)
        {
            NotificationService.Notify(NotificationSeverity.Error, response.Message, duration: 5000);
            return;
        }

        NotificationService.Notify(NotificationSeverity.Success, response.Message);
        NavigationManager.NavigateTo("/dashboard/myobjects");
    }
}