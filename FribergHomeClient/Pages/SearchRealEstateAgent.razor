@page "/searchrealestateagent"
@using FribergHomeClient.Components
@using FribergHomeClient.Data.Dto
@inject IRealEstateAgentService AgentService
@inject NotificationService NotificationService

@* Author: Fredrik *@

<PageTitle>Sök Mäklare</PageTitle>

<div style="text-align: center;">
    <h3>Sök mäklare eller mäklarfirma</h3>
    <input value="@SearchQuery" @oninput="@HandleInputChange" />
</div>

@if (filteredAgents == null || filteredAgents.Count == 0)
{
    <div style="text-align:center;">
        <Spinner />
    </div>
}
else
{
    @foreach (var agent in filteredAgents)
    {
        <AgentProfile Id="@agent.Id" />
    }
}

@code {
    private List<RealEstateAgentDTO> agents;
    private List<RealEstateAgentDTO> filteredAgents = new List<RealEstateAgentDTO>();
    private string SearchQuery = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var response = await AgentService.GetAll();
        if (!response.Success || response.Data == null)
        {
            errorMessage = "Något gick fel när mäklare skulle hämtas, försök igen.";
            NotifyError(errorMessage);
            return;
        }
        agents = response.Data;
        filteredAgents = agents;
    }

    private void SearchAgents()
    {
        if (string.IsNullOrEmpty(SearchQuery))
        {
            filteredAgents = agents;
        }
        else
        {
            filteredAgents = agents.Where(a =>
                (a.FirstName?.Equals(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.LastName?.Equals(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Agency?.Name?.Equals(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }

    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        SearchAgents();
        StateHasChanged();
    }

    private void NotifyError(string errorMessage)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Fel uppstod",
                Detail = errorMessage
            });
    }
}