@page "/searchrealestateagent"
@using FribergHomeClient.Components
@using FribergHomeClient.Data.Dto
@inject IRealEstateAgentService AgentService
@inject NotificationService NotificationService

@* Author: Fredrik *@

<PageTitle>Sök Mäklare</PageTitle>

<RadzenRow Gap="1rem" class="rz-justify-content-center">
    <RadzenColumn SizeSM="8" SizeMD="10" SizeLG="6">
        <div class="rz-p-5 rz-p-md-12 rz-m-5 rz-background-color-primary-lighter" style="border-radius: 4px; box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.3);">
            <RadzenText TextStyle="TextStyle.H5">Sök Mäklare</RadzenText>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" Gap="1rem" Wrap="FlexWrap.Wrap">
                <RadzenFormField Text="Skriv in namn" Variant="Variant.Outlined" Style="width: 100%;">
                    <RadzenAutoComplete @bind-Value=@searchQuery Data=@agents TextProperty="@nameof(RealEstateAgentDTO.FirstName)" Style="width: 13rem" Change="@(args => OnSearchQueryChanged(args))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Namn" }})" />
                    @* <SelectMuncipality @bind-SelectedMunicipalityId="MuncipalityId" /> *@
                </RadzenFormField>
            </RadzenStack>
            <RadzenButton Text="Sök" class="rz-my-2" Style="width: 100%;" Click="HandleInputChange" />
        </div>
    </RadzenColumn>
</RadzenRow>

@if (filteredAgents == null || filteredAgents.Count == 0)
{
    <div style="text-align:center;">
        <Spinner />
    </div>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
        <RadzenRow>
            @foreach (var agent in filteredAgents)
            {
                <AgentProfile Id="@agent.Id" />
            }
        </RadzenRow>
    </RadzenStack>

}

@code {
    private List<RealEstateAgentDTO> agents;
    private List<RealEstateAgentDTO> filteredAgents = new List<RealEstateAgentDTO>();
    private string searchQuery = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var response = await AgentService.GetAll();
        if (!response.Success || response.Data == null)
        {
            errorMessage = "Något gick fel när mäklare skulle hämtas, försök igen.";
            NotifyError(errorMessage);
            return;
        }
        agents = response.Data;
        filteredAgents = agents;
    }

    private void SearchAgents()
    {
        if (string.IsNullOrEmpty(searchQuery))
        {
            filteredAgents = agents;
        }
        else
        {
            filteredAgents = agents.Where(a =>
                (a.FirstName?.Equals(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.LastName?.Equals(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Agency?.Name?.Equals(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }

    }

    private void OnSearchQueryChanged(object value)
    {
        searchQuery = value?.ToString() ?? string.Empty;
        //SearchAgents();
        HandleInputChange();
    }

    private void HandleInputChange()
    {
        SearchAgents();
        StateHasChanged();
    }

    private void NotifyError(string errorMessage)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Fel uppstod",
                Detail = errorMessage
            });
    }
}