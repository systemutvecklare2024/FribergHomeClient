@page "/searchrealestateagent"
@using FribergHomeClient.Components
@using FribergHomeClient.Data.Dto
@inject IRealEstateAgentService AgentService
@inject NotificationService NotificationService

@* Author: Fredrik
   CoAuthor: Emelie
*@

<PageTitle>Sök Mäklare</PageTitle>

<div class="top-backdrop">
	<RadzenRow Gap="1rem" class="rz-justify-content-center">
		<RadzenColumn SizeSM="8" SizeMD="10" SizeLG="6">
			<div class="rz-p-5 rz-p-md-12 rz-m-5 rz-background-color-primary-lighter" style="border-radius: 4px; box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.3);">
				<RadzenText TextStyle="TextStyle.H5">Sök Mäklare</RadzenText>
				<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" Gap="1rem" Wrap="FlexWrap.Wrap">
					<RadzenFormField Text="Skriv in namn" Variant="Variant.Outlined" Style="width: 100%;">
						<RadzenTextBox @bind-Value="searchQuery"></RadzenTextBox>
					</RadzenFormField>
				</RadzenStack>
				<RadzenButton Text="Sök" class="rz-my-2" Style="width: 100%;" Click="@HandleInputChange" />
			</div>
		</RadzenColumn>
	</RadzenRow>
</div>

<div class="content">
	@if (agents == null || agents.Count == 0)
	{
		<div style="text-align:center;">
			<Spinner />
		</div>
	}
	else
	{
		<ContainerBox>
			<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
				<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
					@foreach (var agent in filteredAgents)
					{
						<RadzenColumn Size="12" SizeMD="6" SizeLG="4" SizeXL="3">
						<AgentProfile Id="@agent.Id" />

						</RadzenColumn>
					}
				</RadzenRow>
			</RadzenStack>
		</ContainerBox>
	}
</div>

@code {
	private List<RealEstateAgentDTO> agents;
	private List<RealEstateAgentDTO> filteredAgents = new List<RealEstateAgentDTO>();
	private string searchQuery = string.Empty;
	private string errorMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		var response = await AgentService.GetAll();
		if (!response.Success || response.Data == null)
		{
			errorMessage = "Något gick fel när mäklare skulle hämtas, försök igen.";
			NotifyError(errorMessage);
			return;
		}
		agents = response.Data.Where(a => a.Agency != null).ToList();
		filteredAgents = agents;
	}

	private void SearchAgents()
	{
		if (string.IsNullOrEmpty(searchQuery))
		{
			filteredAgents = agents;
		}
		else
		{
			filteredAgents = agents.Where(a =>
				(a.FirstName?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
				(a.LastName?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
			).ToList();

			if (filteredAgents.Count() == 0)
			{
				NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Detail = "Inga mäklare matchade din sökning." });
			}
		}
		StateHasChanged();

	}

	private void HandleInputChange()
	{
		SearchAgents();
	}

	private void NotifyError(string errorMessage)
	{
		NotificationService.Notify(new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Duration = 5000,
				Summary = "Fel uppstod",
				Detail = errorMessage
			});
	}
}